#!/bin/bash
# A set of Subroutines called by Macros for the SixDesk environment
sixdeskmess()
{
  if test "$sixdeskmesslevel" -le "$sixdesklevel"
  then
    sixdeskday="`date +%a`"
    sixdeskdate="`date +%d/%m/%y`"
    sixdesktime="`date +%T`"
    sixdeskname="`basename $0`                "
    sixdeskname=`echo $sixdeskname | cut -b 1-15`
    if test "$sixdeskecho" != "" -o "$sixdeskmesslevel" -eq 0
    then
      echo "$sixdeskday $sixdeskdate $sixdesktime ""$sixdeskname"" $sixdeskmess" 
    fi
    if test "$sixdesklogdir" != ""
    then
      echo "$sixdeskday $sixdeskdate $sixdesktime ""$sixdeskname"" $sixdeskmess" >> "$sixdesklogdir"/sixdesk.log
    else
      echo "$sixdeskday $sixdeskdate $sixdesktime ""$sixdeskname"" $sixdeskmess" >> ./sixdesk.log
    fi
  fi
}
sixdeskmktmp()
{
# Assumes that the directory (if specified) exists
  if test "$sixdesktmpdirarg" = ""
  then
    sixdesktmpdirarg="$PWD"
  else
    sixdeskfirst=`echo $sixdesktmpdirarg | cut -c1`
    if test "$sixdeskfirst" != "/"
    then
      sixdesktmpdirarg=$PWD/$sixdesktmpdirarg
    fi
  fi
  sixdesktmp=`mktemp -q $sixdesktmpdirarg/$sixdesktmpname.$sixdeskname.$sixdeskhostname.XXXXXX`
  chmod 644 $sixdesktmp
  if test $? -ne 0
  then

#MACRO mymess 0 sixdeskmktmp mktemp failed to produce a temporary file!!!
    sixdeskmesslevel=0
    sixdeskmess="sixdeskmktmp mktemp failed to produce a temporary file!!!"
    sixdeskmess
#MACRO mymess


#MACRO myexit 99
    sixdeskexitparam=99
    sixdeskexit
#MACRO myexit

  fi
  chmod 644 $sixdesktmp
}
sixdeskmktmpdir()
{
# Now does a mkdir -p in case the specified directory does not exist
# e.g. /tmp/mcintosh
  if test "$sixdesktmpdirarg" = ""
  then
    sixdesktmpdirarg="$PWD"
  else
    sixdeskfirst=`echo $sixdesktmpdirarg | cut -c1`
    if test "$sixdeskfirst" != "/"
    then
      sixdesktmpdirarg=$PWD/$sixdesktmpdirarg
    fi
    mkdir -p $sixdesktmpdirarg
    if test $? -ne 0
    then

#MACRO mymess 0 sixdeskmktmpdir: mkdir failed to make $sixdesktmpdirarg!!!
      sixdeskmesslevel=0
      sixdeskmess="sixdeskmktmpdir: mkdir failed to make $sixdesktmpdirarg!!!"
      sixdeskmess
#MACRO mymess


#MACRO myexit 99
      sixdeskexitparam=99
      sixdeskexit
#MACRO myexit

    fi
  fi
  sixdesktmpdir=`mktemp -q -d $sixdesktmpdirarg/$sixdesktmpdirname.$sixdeskname.$sixdeskhostname.XXXXXX`
  if test $? -ne 0
  then

#MACRO mymess 0 sixdeskmktmpdir: mktemp failed to produce a temporary directory!!!
    sixdeskmesslevel=0
    sixdeskmess="sixdeskmktmpdir: mktemp failed to produce a temporary directory!!!"
    sixdeskmess
#MACRO mymess


#MACRO myexit 99
    sixdeskexitparam=99
    sixdeskexit
#MACRO myexit

  fi
  chmod 755 $sixdesktmpdir
}
sixdeskexit()
{
  if test "$SIXDESKLOCKED" != ""
  then

#MACRO mymess 0 sixdeskexit: Freeing lock(s) $SIXDESKLOCKED!!!
    sixdeskmesslevel=0
    sixdeskmess="sixdeskexit: Freeing lock(s) $SIXDESKLOCKED!!!"
    sixdeskmess
#MACRO mymess

    while test "$SIXDESKLOCKED" != ""
    do
      sixdesklockeddir=`echo "$SIXDESKLOCKED" | cut -d " " -f1`

#MACRO myunlock $sixdesklockeddir
      sixdesklockdir=$sixdesklockeddir
      sixdeskunlock
#MACRO myunlock

    done
  fi
  exit "$sixdeskexitparam"
}
sixdeskunlock()
{
  if test "$sixdesklockdir" = ""
  then
    sixdesklockdir="$PWD"
  else
    sixdeskfirst=`echo $sixdesklockdir | cut -c1`
    if test "$sixdeskfirst" != "/"
    then
      sixdesklockdir=$PWD/$sixdesklockdir
    fi
  fi
  if test -f "$sixdesklockdir/sixdesklock"
  then

#MACRO mymess 2 Freeing lock $sixdesklockdir
    sixdeskmesslevel=2
    sixdeskmess="Freeing lock $sixdesklockdir"
    sixdeskmess
#MACRO mymess


#MACRO mymess 2 held by `cat $sixdesklockdir/sixdesklock`)
    sixdeskmesslevel=2
    sixdeskmess="held by `cat $sixdesklockdir/sixdesklock`)"
    sixdeskmess
#MACRO mymess

    chmod 644 $sixdesklockdir/sixdesklock

#MACRO mymess 0 Lock $sixdesklockdir unlocked
    sixdeskmesslevel=0
    sixdeskmess="Lock $sixdesklockdir unlocked"
    sixdeskmess
#MACRO mymess

    SIXDESKLOCKED=`echo "$SIXDESKLOCKED" | sed -e's?'"$sixdesklockdir "'??'`
  else

#MACRO mymess 0 sixdeskunlock: The lock $sixdesklockdir does NOT exist!!!
    sixdeskmesslevel=0
    sixdeskmess="sixdeskunlock: The lock $sixdesklockdir does NOT exist!!!"
    sixdeskmess
#MACRO mymess

  fi
}
sixdesklock()
{
  if test "$sixdesklockdir" = ""
  then
    sixdesklockdir="$PWD"
  else
    sixdeskfirst=`echo $sixdesklockdir | cut -c1`
    if test "$sixdeskfirst" != "/"
    then
      sixdesklockdir=$PWD/"$sixdesklockdir"
    fi
  fi
  if test ! -d "$sixdesklockdir"
  then

#MACRO mymess 0 sixdesklock: The requested lock directory $sixdesklockdir does not exist!!!
    sixdeskmesslevel=0
    sixdeskmess="sixdesklock: The requested lock directory $sixdesklockdir does not exist!!!"
    sixdeskmess
#MACRO mymess


#MACRO myexit 99
    sixdeskexitparam=99
    sixdeskexit
#MACRO myexit

  fi
  lockstat=0
  if test "$SIXDESKLOCKED" != ""
  then
    echo "$SIXDESKLOCKED" | grep "$sixdesklockdir " > /dev/null 2>&1
    if test $? -eq 0
    then

#MACRO mymess 0 sixdesklock: The lock $sixdesklockdir is already locked!!!
      sixdeskmesslevel=0
      sixdeskmess="sixdesklock: The lock $sixdesklockdir is already locked!!!"
      sixdeskmess
#MACRO mymess

      lockstat=1
    fi
  fi
  if test "$lockstat" -eq 0
  then

#MACRO mymess 2 sixdesklock: Obtaining lock $sixdesklockdir
    sixdeskmesslevel=2
    sixdeskmess="sixdesklock: Obtaining lock $sixdesklockdir"
    sixdeskmess
#MACRO mymess

    sixdeskgotit="false"
    sixdeskwait="false"
    lessmess=0
    while test "$sixdeskgotit" = "false"
    do
      if test ! -s $sixdesklockdir/sixdesklock
      then
        touch $sixdesklockdir/sixdesklock
        chmod 644 $sixdesklockdir/sixdesklock
      fi
      if test -w $sixdesklockdir/sixdesklock
      then
        sixdeskkey="$0 on `hostname` at `date` by proc $$"
        echo "$sixdeskkey" > $sixdesklockdir/sixdesklock
        if test $? -eq 0
        then
          sixdeskval=`cat $sixdesklockdir/sixdesklock`
          if test "$sixdeskval" = "$sixdeskkey"
          then
            chmod 444 $sixdesklockdir/sixdesklock
            sixdeskval=`cat $sixdesklockdir/sixdesklock`
            if test "$sixdeskval" = "$sixdeskkey"
            then
              sixdeskgotit="true"
              export SIXDESKLOCKED="$SIXDESKLOCKED""$sixdesklockdir "
            else
              chmod 644 $sixdesklockdir/sixdesklock
            fi
          fi
        fi
      fi
      if test "$sixdeskgotit" = "false"
      then
        if test "$lessmess" -eq 0
        then

#MACRO mymess 1 The directory $sixdesklockdir is currently locked by
          sixdeskmesslevel=1
          sixdeskmess="The directory $sixdesklockdir is currently locked by"
          sixdeskmess
#MACRO mymess


#MACRO mymess 1 script `cat $sixdesklockdir/sixdesklock`
          sixdeskmesslevel=1
          sixdeskmess="script `cat $sixdesklockdir/sixdesklock`"
          sixdeskmess
#MACRO mymess

        fi
        if test "$sixdeskwait" = "false"
        then
          if test "$lessmess" -eq 0
          then
            sixdeskwait="true"  

#MACRO mymess 1 This script $0 will just wait for it to become free.
            sixdeskmesslevel=1
            sixdeskmess="This script $0 will just wait for it to become free."
            sixdeskmess
#MACRO mymess


#MACRO mymess 1 If this situation continues for ever then it may be false.
            sixdeskmesslevel=1
            sixdeskmess="If this situation continues for ever then it may be false."
            sixdeskmess
#MACRO mymess


#MACRO mymess 1 You may have CTRL_C/killed a script and left the lock locked.
            sixdeskmesslevel=1
            sixdeskmess="You may have CTRL_C/killed a script and left the lock locked."
            sixdeskmess
#MACRO mymess


#MACRO mymess 1 Some other error like a missing file may also cause a script to die
            sixdeskmesslevel=1
            sixdeskmess="Some other error like a missing file may also cause a script to die"
            sixdeskmess
#MACRO mymess


#MACRO mymess 1 To reset the lock just issue an unlock $sixdesklockdir command
            sixdeskmesslevel=1
            sixdeskmess="To reset the lock just issue an unlock $sixdesklockdir command"
            sixdeskmess
#MACRO mymess

            lessmess=1
          fi
        fi
        delay=`date +%S`
        delay=`expr $delay + 5`

#MACRO mymess 2 Sleeping $delay seconds
        sixdeskmesslevel=2
        sixdeskmess="Sleeping $delay seconds"
        sixdeskmess
#MACRO mymess

        sleep $delay
      else

#MACRO mymess 0 Lock $sixdesklockdir locked
        sixdeskmesslevel=0
        sixdeskmess="Lock $sixdesklockdir locked"
        sixdeskmess
#MACRO mymess

      fi
    done
  fi
}
sixdesktunes(){
    # Takes tunex, tuney, tunex1, tuney1, deltax, deltay
    # and produces
    # itunex, ituney, itunex1, ituney1, ideltax, ideltay
    # it produces also xlen and ylen (ie length of fractional part)
    # reworked by A.Mereghetti, 2016-07-19

    sixdeskmesslevel=0
    sixdeskexitparam=12
    
    if [ -z "$tunex1" ] ; then
	tunex1=$tunex
	deltax=0.0
    fi
    if [ -z "$tuney1" ] ; then
	tuney1=$tuney
	deltay=0.0
    fi
    if [ "$deltax" == "0.0" ] && [ "$deltay" == "0.0" ] ; then
	deltax=$tunex
	deltay=$tuney
    fi

    # x plane
    # - sanity checks (ie absence of "." or "." being first/last char):
    tunex=$(sixdeskAddDotFloat $tunex)
    tunex1=$(sixdeskAddDotFloat $tunex1)
    deltax=$(sixdeskAddDotFloat $deltax)
    # - strip away useless "0" chars
    tunex=$(sixdeskFixZerosFloat $tunex)
    tunex1=$(sixdeskFixZerosFloat $tunex1)
    deltax=$(sixdeskFixZerosFloat $deltax)
    # - get fractional and integer parts of tunes
    local __itunex=`echo "$tunex" | cut -d\. -f1`
    local __ftunex=`echo "$tunex" | cut -d\. -f2`
    local __itunex1=`echo "$tunex1" | cut -d\. -f1`
    local __ftunex1=`echo "$tunex1" | cut -d\. -f2`
    local __ideltax=`echo "$deltax" | cut -d\. -f1`
    local __fdeltax=`echo "$deltax" | cut -d\. -f2`
    # - get longest fractional part (meaningful!)
    xlen=`printf "$__ftunex\n$__ftunex1\n$__fdeltax\n" | awk '{print (length($1))}' | sort -g | tail -n1`
    # - get integer algebra
    local  __llen=`echo "$__ftunex $xlen" | awk '{print ($2-length($1))}'`
    itunex="$__itunex$__ftunex"
    if [ $__llen -gt 0 ] ; then
	itunex="$itunex`printf "0%.0s" $( seq 1 $__llen)`"
    fi
    local __llen=`echo "$__ftunex1 $xlen" | awk '{print ($2-length($1))}'`
    itunex1="$__itunex1$__ftunex1"
    if [ $__llen -gt 0 ] ; then
	itunex1="$itunex1`printf "0%.0s" $( seq 1 $__llen)`"
    fi
    local __llen=`echo "$__fdeltax $xlen" | awk '{print ($2-length($1))}'`
    ideltax="$__ideltax$__fdeltax"
    if [ $__llen -gt 0 ] ; then
	ideltax="$ideltax`printf "0%.0s" $( seq 1 $__llen)`"
    fi

    # y plane
    # - sanity checks (ie absence of "." or "." being first/last char):
    tuney=$(sixdeskAddDotFloat $tuney)
    tuney1=$(sixdeskAddDotFloat $tuney1)
    deltay=$(sixdeskAddDotFloat $deltay)
    # - strip away useless "0" chars
    tuney=$(sixdeskFixZerosFloat $tuney)
    tuney1=$(sixdeskFixZerosFloat $tuney1)
    deltay=$(sixdeskFixZerosFloat $deltay)
    # - get fractional and integer parts of tunes
    local __ituney=`echo "$tuney" | cut -d\. -f1`
    local __ftuney=`echo "$tuney" | cut -d\. -f2`
    local __ituney1=`echo "$tuney1" | cut -d\. -f1`
    local __ftuney1=`echo "$tuney1" | cut -d\. -f2`
    local __ideltay=`echo "$deltay" | cut -d\. -f1`
    local __fdeltay=`echo "$deltay" | cut -d\. -f2`
    # - get longest fractional part (meaningful!)
    ylen=`printf "$__ftuney\n$__ftuney1\n$__fdeltay\n" | awk '{print (length($1))}' | sort -g | tail -n1`
    # - get integer algebra
    local  __llen=`echo "$__ftuney $ylen" | awk '{print ($2-length($1))}'`
    ituney="$__ituney$__ftuney"
    if [ $__llen -gt 0 ] ; then
	ituney="$ituney`printf "0%.0s" $( seq 1 $__llen)`"
    fi
    local __llen=`echo "$__ftuney1 $ylen" | awk '{print ($2-length($1))}'`
    ituney1="$__ituney1$__ftuney1"
    if [ $__llen -gt 0 ] ; then
	ituney1="$ituney1`printf "0%.0s" $( seq 1 $__llen)`"
    fi
    local __llen=`echo "$__fdeltay $ylen" | awk '{print ($2-length($1))}'`
    ideltay="$__ideltay$__fdeltay"
    if [ $__llen -gt 0 ] ; then
	ideltay="$ideltay`printf "0%.0s" $( seq 1 $__llen)`"
    fi

    # some consistency checks
    if [ $itunex1 -lt $itunex ] ; then
	sixdeskmess="sixdesktunes: tunex1 $tunex1 .lt. tunex $tunex!!!"
	sixdeskmess
	sixdeskexit
    elif [ $itunex1 -ne $itunex ] && [ $ideltax -eq 0 ] ; then
	sixdeskmess="sixdesktunes: deltax .eq. 0 !!!"
	sixdeskmess
	sixdeskexit
    fi
    if [ $ituney1 -lt $ituney ] ; then
	sixdeskmess="sixdesktunes: tuney1 $tuney1 .lt. tuney $tuney!!!"
	sixdeskmess
	sixdeskexit
    elif [ $ituney1 -ne $ituney ] && [ $ideltay -eq 0 ] ; then
	sixdeskmess="sixdesktunes: deltay .eq. 0 !!!"
	sixdeskmess
	sixdeskexit
    fi

    # notify user
    if [ $ideltax -eq $itunex ] && [ $ideltay -eq $ituney ] ; then
	# only one point
	sixdeskmess="sixdesktunes: Tune ${tunex}_${tuney}"
	sixdeskmess
    else
	# full scan
	sixdeskmess="sixdesktunes: Tunescan (${tunex},${tuney}) to (${tunex1},${tuney1}) by (${deltax}, ${deltay})"
	sixdeskmess
    fi
}
sixdeskPrepareTunes(){
    # by A.Mereghetti, 2016-07-19
    # converts itunexx/ituneyy into tunexx/tuneyy
    tunexx=$(sixdeskAddDotFloat $tunexx)
    tuneyy=$(sixdeskAddDotFloat $tuneyy)
    tunexx=`echo "$itunexx" | awk -v "flen=$xlen" '{lstring=length($1); fpart=substr($1,lstring-flen+1,flen); ipart=substr($1,1,lstring-flen); print (ipart"."fpart)}'`
    tuneyy=`echo "$ituneyy" | awk -v "flen=$ylen" '{lstring=length($1); fpart=substr($1,lstring-flen+1,flen); ipart=substr($1,1,lstring-flen); print (ipart"."fpart)}'`
    tunexx=$(sixdeskFixZerosFloat $tunexx)
    tuneyy=$(sixdeskFixZerosFloat $tuneyy)
}
sixdeskAddDotFloat(){
    # by A.Mereghetti, 2016-07-20
    # add trailing "." in case it is not there
    local __input="$1"
    local __result=`echo "$__input" | awk '{lstring=length($1); dpos=index($1,"."); if (dpos==0) print ($1"."); else print ($1);}'`
    echo "$__result"
}
sixdeskFixZerosFloat(){
    # by A.Mereghetti, 2016-07-20
    # remove useless trailing/heading "0", but leave one before/after "." in case this is first/last char
    local __input="$1"
    local __result=`echo "$__input" | sed -e's?0*$??' | sed -e's?^0??' | awk '{lstring=length($1); dpos=index($1,"."); if (dpos==1) print("0"$1); else print($1);}' | awk '{lstring=length($1); dpos=index($1,"."); if (dpos==lstring) print($1"0"); else print($1);}'`
    echo "$__result"
}
sixdeskinttunes()
{
  tmp=`echo $tunexx | sed -e's? ??g'`
  first=`echo $tunexx | cut -c1`
  if test "$first" = "."
  then
    inttunexx=0.
  else
    inttunexx=`echo $tmp | sed -e's?\([0-9][0-9]*\.\).*?\1?'`
  fi
  tmp=`echo $tuneyy | sed -e's/ //g'`
  first=`echo $tuneyy | cut -c1`
  if test "$first" = "."
  then
    inttuneyy=0.
  else
    inttuneyy=`echo $tmp | sed -e's?\([0-9][0-9]*\.\).*?\1?'`
  fi
}
sixdeskamps()
{
  # Generate the integer amplitude equivalents, and update fampstart
  # ns1l
  junk=`echo $ns1l | grep '\.'`
  if test $? -ne 0
  then
    ampstart=$ns1l"000"
  else
    ins1l=`echo "$ns1l" | cut -d"." -f1`
    fns1l=`echo "$ns1l" | cut -d"." -f2`
    ins1l=$ins1l"000"
    fns1l=`echo $fns1l"000" | cut -c1-3`
    ampstart=`expr $ins1l + $fns1l`
  fi
  # ns2l
  junk=`echo $ns2l | grep '\.'`
  if test $? -ne 0
  then
    ampfinish=$ns2l"000"
  else
    ins2l=`echo "$ns2l" | cut -d"." -f1`
    fns2l=`echo "$ns2l" | cut -d"." -f2`
    ins2l=$ins2l"000"
    fns2l=`echo $fns2l"000" | cut -c1-3`
    ampfinish=`expr $ins2l + $fns2l`
  fi
  # nsincl
  junk=`echo $nsincl | grep '\.'`
  if test $? -ne 0
  then
    ampincl=$nsincl"000"
  else
    insincl=`echo "$nsincl" | cut -d"." -f1`
    fnsincl=`echo "$nsincl" | cut -d"." -f2`
    insincl=$insincl"000"
    fnsincl=`echo $fnsincl"000" | cut -c1-3`
    ampincl=`expr $insincl + $fnsincl`
  fi
  if test $ampstart -ge 99999 -o $ampfinish -ge 99999 -o $ampincl -ge 99999
  then

#MACRO mymess 0 sixdeskamps: Problem with amplitude definitions, $ns1l, $ns2l, $nsincl
    sixdeskmesslevel=0
    sixdeskmess="sixdeskamps: Problem with amplitude definitions, $ns1l, $ns2l, $nsincl"
    sixdeskmess
#MACRO mymess


#MACRO myexit 13
    sixdeskexitparam=13
    sixdeskexit
#MACRO myexit

  fi

#MACRO mymess 0 sixdeskamps: Amps $ampstart to $ampfinish by $ampincl
  sixdeskmesslevel=0
  sixdeskmess="sixdeskamps: Amps $ampstart to $ampfinish by $ampincl"
  sixdeskmess
#MACRO mymess

}
sixdeskrundir()
{
  if test "$BNL" = ""
  then
    rundirname=`echo $runnamename | sed -e's?\([^%]*\)%\([^%]*\)%\([^%]\)%\([^%]*\)%\([^%]*\)%\([^%]*\)%?\1/\2/\3/\4/\5/e\6/?'`
    rundirname=`echo $rundirname | sed -e's?/s/?/simul/?'`
    rundirname=`echo $rundirname | sed -e's?/t/?/trans/?'`
    rundirname=`echo $rundirname | sed -e's?/m/?/momen/?'`
    rundirname=`echo $rundirname | sed -e's?/d/?/da/?'`
  else
    rundirname=`echo $runnamename | sed -e's?%?\/?g'`
  fi
}
